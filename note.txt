pelajari cara menambahkan kode sedikit demi sedikit
gunakana arsitektur kode yang mudah di pahami
biasakan baca kode
pelajari cara menulis kode secara manual
satu hari satu fokus todo, tapi sampai rampung (kalau bisa)
sambil di pahami cara menambah fitur pelan-pelan tulis manual
tulis kode yang manusiawi dan clean code

jangan buru-buru dan tergesa-gesa, pelan-pelan saja yang penting rampung dan prosesnya dinikmati
alurnya jelas dan dimengerti


saat hendak membuat kode, buat analisis dulu, kira-kira kode mana yang diterapkan lebih dari satu tempat, agar penulisan kode bisa lebih mudah



perancangan halaman chat

default bento.
bisa kirim pesan ke bento
di klik kontak ---> muncul nama sesuai kontak di header
chat bisa di kirim sembarangan ke semua pengguna lalu hilang.

pisahkan chat yang dikirim ke bento -- simpan localstorage
pisahkan chat yang di kirim sesuai kontak -- simpan di localstorage
kontak baru selalu menampilkan halaman chat kosong


file yang terlibat
chatPage
chatHeader
chatBody
ContactsPage
ContactList
ContactItem
Sidebar



"use client";

import { useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../states";
import
    {
        ChatMessage,
        addMessageToContact,
        setMessagesForContact,
        deleteMessageForContact,
    } from "../states/chatSlice";
import { useMessageEditing, useMessageDeletion } from "./chats";

export function useChatPage()
{
    const dispatch = useDispatch();

    // Ambil kontak aktif dari redux
    const activeContact = useSelector( ( state: RootState ) => state.contacts.activeContact );
    const contactName = activeContact?.alias || activeContact?.name || "Bento";

    // Ambil pesan dari Redux
    const messages = useSelector( ( state: RootState ) => state.chat[contactName] || [] );
    const [chatSide, setChatSide] = useState<"kiri" | "kanan">( "kanan" );

    // --- Hook untuk edit pesan ---
    const {
        editingIndex,
        editType,
        editingMessage,
        handleEditTextMessage,
        handleEditFileMessage,
        handleSubmitEdit,
        handleCancelEdit,
    } = useMessageEditing( messages, ( newMessages: ChatMessage[] ) =>
    {
        // Update messages di Redux setelah edit
        dispatch( setMessagesForContact( { contact: contactName, messages: newMessages } ) );
    } );

    function handleEditIndexChange( i: number | null )
    {
        ( editingIndex as any ) = i;
    }
    function handleEditTypeChange( t: "text" | "file" | null )
    {
        ( editType as any ) = t;
    }

    // --- Hook untuk hapus / soft delete pesan ---
    const {
        handleDeleteTextMessage,
        handleSoftDeleteTextMessage,
        handleSoftDeleteFileMessage,
        handleDeleteFileMessage,
        handleSoftDeleteAudioMessage,
        handleDeleteAudioMessage,
    } = useMessageDeletion( messages, ( newMessages: ChatMessage[] ) =>
    {
        dispatch( setMessagesForContact( { contact: contactName, messages: newMessages } ) );
    }, editingIndex, ( i ) => handleEditIndexChange( i ), ( t ) => handleEditTypeChange( t ) );

    // --- Fungsi kirim pesan ---
    const handleSendMessage = ( message: string ) =>
    {
        const newMessage: ChatMessage = {
            text: message,
            time: new Date().toLocaleTimeString( [], { hour: "2-digit", minute: "2-digit" } ),
            side: chatSide,
        };
        dispatch( addMessageToContact( { contact: contactName, message: newMessage } ) );
    };

    const handleSendAudio = ( audioBlob: Blob ) =>
    {
        const audioUrl = URL.createObjectURL( audioBlob );
        const newMessage: ChatMessage = {
            audioUrl,
            time: new Date().toLocaleTimeString( [], { hour: "2-digit", minute: "2-digit" } ),
            side: chatSide,
        };
        dispatch( addMessageToContact( { contact: contactName, message: newMessage } ) );
    };

    const handleSendFile = ( file: File, caption?: string ) =>
    {
        const fileUrl = URL.createObjectURL( file );
        const newMessage: ChatMessage = {
            fileUrl,
            fileName: file.name,
            caption: caption?.trim() || undefined,
            time: new Date().toLocaleTimeString( [], { hour: "2-digit", minute: "2-digit" } ),
            side: chatSide,
        };
        dispatch( addMessageToContact( { contact: contactName, message: newMessage } ) );
    };

    return {
        messages,
        chatSide,
        setChatSide,
        editingIndex,
        editType,
        editingMessage,
        handleEditTextMessage,
        handleEditFileMessage,
        handleSubmitEdit,
        handleCancelEdit,
        handleDeleteTextMessage,
        handleSoftDeleteTextMessage,
        handleDeleteFileMessage,
        handleSoftDeleteFileMessage,
        handleDeleteAudioMessage,
        handleSoftDeleteAudioMessage,
        handleSendMessage,
        handleSendAudio,
        handleSendFile,
    };
}
